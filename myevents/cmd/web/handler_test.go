package main

import (
	"log"
	"os"
	"testing"
)

var app *Application

func TestMain(m *testing.M) {
	//need to setup a mock connection to a test database
	//to make these test cases work.
	app = &Application{
		ErrorLog: log.New(os.Stderr, "ERROR\n", log.Ldate|log.Ltime),
		InfoLog:  log.New(os.Stderr, "INFO\n", log.Ldate|log.Ltime),
	}
	code := m.Run()
	os.Exit(code)
}

/*
func TestGetEvents(t *testing.T) {
	rr := httptest.NewRecorder()
	// Initialize a new dummy http.Request.
	request, err := http.NewRequest("GET", "/events", nil)
	if err != nil {
		t.Fatal(err)
	}
	// Call the ping handler function, passing in the // httptest.ResponseRecorder and http.Request.
	app.GetEvents(rr, request)
	// Call the Result() method on the http.ResponseRecorder to get the // http.Response generated by the ping handler.
	rs := rr.Result()
	// We can then examine the http.Response to check that the status code // written by the ping handler was 200.
	if rs.StatusCode != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	}
}

/*
func TestGetEventByID(t *testing.T) {
	rr := httptest.NewRecorder()
	// Initialize a new dummy http.Request.
	request, err := http.NewRequest("GET", "/events/id/25", nil)
	if err != nil {
		t.Fatal(err)
	}
	// Call the ping handler function, passing in the // httptest.ResponseRecorder and http.Request.
	app.GetEventByID(rr, request)
	// Call the Result() method on the http.ResponseRecorder to get the // http.Response generated by the ping handler.
	rs := rr.Result()
	// We can then examine the http.Response to check that the status code // written by the ping handler was 200.
	if rs.StatusCode != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	}
}
*/
